# Deezel Common Library
#
# This crate contains all the core business logic for the deezel project.
# It's designed to be WASM-compatible and provides trait abstractions
# for system calls, JSON-RPC, and disk I/O.
#
# Key features:
# - WASM-compatible (no std::fs, no tokio::process, etc.)
# - Trait-based abstractions for system dependencies
# - Pure business logic without CLI concerns
# - Can be imported into web applications

[package]
name = "deezel-common"
version = "0.1.0"
edition = "2021"
description = "Core deezel library for Bitcoin wallet operations, alkanes smart contracts, and blockchain interaction"
authors = ["Deezel Team"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/deezel-team/deezel"
keywords = ["bitcoin", "alkanes", "smart-contracts", "wallet", "blockchain"]
categories = ["cryptography::cryptocurrencies", "web-programming", "wasm"]

[lib]
name = "deezel_common"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core Bitcoin functionality
bitcoin = { workspace = true }
ordinals = { workspace = true }
protorune-support = { workspace = true }
deezel-rpgp = { path = "../deezel-rpgp", default-features = false }
bitcoincore-rpc = { workspace = true }
 
# Cryptography and wallet functionality
secp256k1 = { workspace = true }
bip39 = { workspace = true }
pbkdf2 = { workspace = true }
aes-gcm = { workspace = true }
rand = { workspace = true }
sha2 = { workspace = true }
 
psbt-v2 = "0.1.0"
 
# Async runtime (WASM-compatible features only)
futures = { workspace = true }

# Serialization/Deserialization
serde = { workspace = true }
serde_json = { workspace = true }

# Error handling
anyhow = { workspace = true }
thiserror = { workspace = true }

# Logging
log = { workspace = true }

# Utilities
hex = { workspace = true }
async-trait = { workspace = true }
base64 = { workspace = true }
bech32 = { workspace = true }
regex = { workspace = true }
chrono = { workspace = true }
smallvec = { workspace = true }

# Alkanes-rs crates
alkanes-support = { workspace = true }
metashrew-support = { workspace = true }
protobuf = { workspace = true }

# WASM runtime for alkane inspection
wasmi = { workspace = true, optional = true }
wasmprinter = { workspace = true, optional = true }
wat = { workspace = true, optional = true }
sha3 = { workspace = true }
spin = { workspace = true, optional = true }

# Additional dependencies for comprehensive functionality
dirs = { workspace = true, optional = true }
tempfile = { workspace = true, optional = true }
flate2 = { workspace = true }
tokio = { workspace = true, features = ["sync", "time"], optional = true }
reqwest = { workspace = true, features = ["json"], optional = true }
url = { version = "2.5.0", optional = true }
clap = { workspace = true, features = ["derive"] }
ord = { version = "0.23.2", optional = true }

[features]
default = ["wasm-inspection", "native-deps"]
wasm-inspection = ["wasmi", "wasmprinter", "wat", "spin"]
native-deps = ["dirs", "tempfile", "tokio", "reqwest", "url", "ord"]
web-compat = ["spin"]

[dev-dependencies]
deezel-rpgp = { path = "../deezel-rpgp", features = ["std"] }
tokio = { workspace = true, features = ["macros", "rt", "time", "sync", "test-util"] }
env_logger = "0.10"
wiremock = "0.6.0"

# WASM-specific configuration
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
js-sys = "0.3"
web-sys = "0.3"
serde-wasm-bindgen = "0.6"
gloo-timers = { version = "0.3.0", features = ["futures"] }

[target.'cfg(target_arch = "wasm32")'.dependencies.getrandom]
version = "0.2"
features = ["js"]
